PRD its nothing but project requirement document

figuring it what we are trying to build and where to stop

we are going to build project management plateform like jira


let setup a project

using npm init
you can modify everything later on

you will get a package.json

i have changed the script and add Dev element in that script object of package.json
in order to run the we have to type npm run dev

we your syntax has require then in the typr section of package.json 
add commonjs 
and if you want to work with import go with modules

i prefer modules


prettier inclusion
look we have installed prettier in order to make the entire code
look smooth and readable 

npx prettier . --write

you have to run this command in order to initialize and it will do the job

npx prettier . --check
this is to make changes 

"useTabs" : false,
this means dont use tabs for indexation prefer spaces
check .prettierc file for more info

now downloading autoserver
popular options are nodemon and node --watch

and update the dev element in script for future reference
or safe side add another element by different name

hot refresh,hot reloading,hot module reloading
these are couple of name os keeping our server on auto run
like it will run as on its own as soon as it detect changes


now work with .env files
this is done to protect the important information

env is nothing but environment variable

lets understand what is happening
the server(hardware ) is very much secure and our server code is a
process running in the server 

what we want is our important credentials get the security of the server

so we keep our important in env file

this is the flow

client -> server{ (server code),remaining proces and storage}

if the server process needs important infop it will get that from env variable and
it will reply back

to install run npm i dotenv

it is install in Dependencies section not devDependencies
which clearly indicates that its mandatory to run the application

devDependencies are not required in deployement environment

project structure which i have followed
public
    public data like logo
    create an file inside this (.gitkeep) in order to push the folder
    in github
    because git ignores empty files
scr 
    controllers - logic
    db
    middlewares(they are between request and server)
    models(it deals with the structure of the data in the database)
    routes(routing info like post/....)
    utils(things which can be reused like sending mails)
    validator(those function which validates the data)


now express part 
there are two main components of an application
1 - server how routing takes place
2 - database how data is being stored and retreived

we are going with expresss for server and for the database
we are going with mongodb through mongoose(there just makes our life easier)

express <-> mongoose(contain mongodb)

few ways to install these packages
npm i packageName@latest
npm i packageName@versionNumber


lets learn about HTTP 
hypertext transfer protocol
get - request is a resource from server
post - sending a resource to the server
put - replace the resource(update) new information
patch - replace just a part of information
delete - requesting serevr to delete something


since we are using index.js as main entry point
it is better to have pure html css and javascript here


CORS error
its just deals with who can conatct the server
in our case * means everyone

cross origin resource sharing error
nowadays the frontend lives in separate environment such as versal,aws etc

and backend lives somewhere else
and the browser doesn't allow to communcicate changes in top the backend
like certain changes like portno change,syubdoain change etc

so it is the job of backend developer to handle that

so you have to configure express for that using express.use
which acts as a middlewares between req and server


lets standarized(server response and error)
standarized is nothing but predictable format{
    status code,
    data
}

you know what nodejs has a standarized ways of handling errors
but not the response

//saving constants
database can live in or out of this server

now lets connect the application to the database
mongodb

here the appproach we are taking is our sever will live outside the system
mongodb atlas

the flow is our system -> mongoose -> mongodb
here mongoose is an odm
object document mapper
which makes our job easier
the word document used here since the structure is flexible


the flow is you write all the logics in controllers
then you write all the endpoints which are allowed
then you write the basic version of end points in app.js

app.js(chatgpt.com) -> route.js contains which logic after which /
controllers contains that logic

###############################
lets write database schema
in models

the syntax which we are working is filename.folder.js


###############################
JSON web token
this will help us to keep the user authenticated in our plateform

everytime when a client makes a request we want to authenticate who he is
so what we does it is we create a json token and it is send everytime
the client sends the request

json web token consist of theree things
header.payload.signature

headerr contain an object which the type of algorithm and type of format
which is json


what is token
it is a string

types of token
without data
        this is nothing but otp mechanisms you generate a string
        two copies one in database and one sent to the user
        and then asks the user to send the data back if it matches allows them to make
        changes

with data
        here we have another two types of token based on their expiry
        access token -> they lived for a very short period of time
        refersh token -> they live for longer amount of time

this is how tokens with data works

for a user you generate two token access and refresh
serevr has only referesh token
user has both referesh and access token

whenever a user wants to communcicate it communcicates with access tokens
since access token are short lived when a user communcicates with an expired
token server sends a special response and ask for refresh token in the server

the user sends a refresh token using that we match it in server
if they are matched then a new access token gets generated which is send to
the user and now the can communcicates with the server
 

########################################################
now it time tocreate email template
for user verification

#############
lets a register a user
in order to save a new user
we have to generate access token, refresh token, without data token , then verification mails
then sending the response which user 



######
middlewares are function which runs when data flows from one system to another

express dont allow cookies in general

###every request which recahes the server should have an access token
we can do this either using cookies or header since cookies are not avilable in mobiles